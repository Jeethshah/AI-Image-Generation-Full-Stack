import React, { useState, useEffect } from 'react';

// Temporary mock components (replace with real ones later)
const Loader = () => <div>Loading...</div>;

const Card = ({ name, prompt, photo }) => (
  <div className="border p-4 rounded shadow">
    <img src={photo} alt={prompt} className="w-full h-40 object-cover mb-2" />
    <h3 className="font-bold">{name}</h3>
    <p>{prompt}</p>
  </div>
);

const FormField = ({ labelName, type, name, placeholder, value, handleChange }) => (
  <div>
    <label className="block text-sm font-medium text-gray-700">{labelName}</label>
    <input
      type={type}
      name={name}
      placeholder={placeholder}
      value={value}
      onChange={handleChange}
      className="mt-1 block w-full border border-gray-300 rounded-md p-2"
    />
  </div>
);

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  }
  return (
    <h2 className="mt-5 font-bold text-[#6449ff] text-xl uppercase">{title}</h2>
  );
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState([]);
  const [searchText, setSearchText] = useState('');
  const [searchedResults, setSearchedResults] = useState([]);

  // Simulate fetch
  useEffect(() => {
    setLoading(true);
    const fetchPosts = () => {
      // Simulated API response
      const mockData = [
        {
          _id: '1',
          name: 'AI Art 1',
          prompt: 'Cyberpunk city at night',
          photo: 'https://via.placeholder.com/300x200',
        },
        {
          _id: '2',
          name: 'AI Art 2',
          prompt: 'Futuristic jungle scene',
          photo: 'https://via.placeholder.com/300x200',
        },
      ];
      setAllPosts(mockData);
      setLoading(false);
    };

    fetchPosts();
  }, []);

  // Search filter logic
  useEffect(() => {
    if (searchText) {
      const filtered = allPosts.filter(
        (item) =>
          item.name.toLowerCase().includes(searchText.toLowerCase()) ||
          item.prompt.toLowerCase().includes(searchText.toLowerCase())
      );
      setSearchedResults(filtered);
    } else {
      setSearchedResults([]);
    }
  }, [searchText, allPosts]);

  return (
    <section className="max-w-7xl mx-auto p-4">
      <div>
        <h1 className="font-extrabold text-[#222328] text-[32px] text-left">
          The Community Showcase
        </h1>
        <p className="mt-2 text-[#666e75] text-[16px] text-left max-w[500px]">
          Browse through a collection of imaginative and visually stunning images generated by DALL-E AI
        </p>
      </div>

      <div className="mt-16">
        <FormField
          labelName="Search posts"
          type="text"
          name="search"
          placeholder="Search by name or prompt"
          value={searchText}
          handleChange={(e) => setSearchText(e.target.value)}
        />
      </div>

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-[#666e75] text-xl mb-3">
                Showing results for <span className="text-[#222328]">{searchText}</span>
              </h2>
            )}

            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {searchText ? (
                <RenderCards data={searchedResults} title="No search results found" />
              ) : (
                <RenderCards data={allPosts} title="No posts found" />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;
